{"version":3,"sources":["Components/assets/cat.png","Components/Header/Header.js","Components/Card/Card.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","React","Component","Card","props","selectFood","e","preventDefault","selected","state","setState","hovered","hoverCard","type","this","tasteName","selectedInfo","disabled","onClick","onMouseEnter","onMouseLeave","portions","addInfo","weight","fullCardClass","cn","fullCard","map","current","index","key","src","catPic","alt","renderUnderInfo","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a9ee1d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.eead2e56.png\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <header className='mainHeader'>\r\n                <h1>Ты сегодня покормил кота?</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport './Card.css';\r\nimport catPic from '../assets/cat.png';\r\n\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hovered: false,\r\n            selected: false,\r\n        }\r\n    }\r\n\r\n    selectFood = (e) => {\r\n        e.preventDefault();\r\n        const { selected } = this.state;\r\n        selected ? this.setState({ selected: !selected, hovered: true }) :\r\n            this.setState({ selected: !selected, hovered: false });\r\n    }\r\n\r\n    hoverCard = (e) => {\r\n        e.preventDefault();\r\n        e.type === 'mouseenter' ?\r\n            this.setState({ hovered: true }) : this.setState({ hovered: false });;\r\n    }\r\n\r\n    renderUnderInfo() {\r\n        const { tasteName, selectedInfo, disabled } = this.props;\r\n        const { selected } = this.state;\r\n        if (disabled) {\r\n            return <p className=\"underInfo\">Печалька, {tasteName} закончился.</p>;\r\n        } else if (!selected) {\r\n            return (<p className=\"underInfo\">Чего сидишь? Порадуй котэ, <button type='button' onClick={this.selectFood}\r\n                onMouseEnter={this.hoverCard} onMouseLeave={this.hoverCard}>\r\n                <span className=\"underLine\">купи</span>.</button></p>)\r\n        } else {\r\n            return <p className=\"underInfo\">{selectedInfo}</p>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { tasteName, portions, addInfo, weight, disabled } = this.props;\r\n        const { selected, hovered } = this.state;\r\n\r\n        const fullCardClass = cn({\r\n            fullCard: true,\r\n            disabled,\r\n            selected,\r\n            hovered,\r\n        });\r\n\r\n        return (\r\n            <div className={fullCardClass}>\r\n                <div className='card' onClick={disabled ? null : this.selectFood}\r\n                    onMouseEnter={disabled ? null : this.hoverCard} onMouseLeave={disabled ? null : this.hoverCard}>\r\n                    <div className='description'>\r\n                        {selected && hovered ?\r\n                            <span className=\"cardHeadHovered\">Котэ не одобряет?</span> :\r\n                            <span className=\"cardHead\">Сказачное заморское яство</span>}\r\n                        <h2>Нямушка<span className='tasteName'>{tasteName}</span></h2>\r\n                        <span className='info'>{portions} порций</span>\r\n                        {addInfo.map((current, index) => <span className='info' key={index}>{current}</span>)}\r\n                    </div>\r\n                    <img src={catPic} alt='Cat' className='catPic'></img>\r\n                    <div className='weight'>\r\n                        <span>{weight}</span>\r\n                        <span>кг</span>\r\n                    </div>\r\n                </div>\r\n                {this.renderUnderInfo()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './Main.css'\r\n\r\nclass Main extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <main className='main'>\r\n                <Card tasteName={'с фуа-гра'} portions={'10'}\r\n                    addInfo={['мышь в подарок']}\r\n                    weight={'0,5'} selectedInfo={'Печень утки разварная с артишоками.'}\r\n                    disabled={false} />\r\n                <Card tasteName={'с рыбой'} portions={'40'}\r\n                    addInfo={['2 мыши в подарок']}\r\n                    weight={'2'} selectedInfo={'Головы щучьи с чесноком да свежайшая сёмгушка.'}\r\n                    disabled={false} />\r\n                <Card tasteName={'с курой'} portions={'100'}\r\n                    addInfo={['5 мышей в подарок', 'заказчик доволен']}\r\n                    weight={'5'} selectedInfo={'Филе из цыплят с труфелями в бульоне.'}\r\n                    disabled={true} />\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport Main from './Components/Main/Main'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Header />\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}